---
import Layout from "../../layouts/Layout.astro";
import fs from "fs";
import path from "path";
import { getCollection } from "astro:content";

export async function getStaticPaths() {
  const episodesDir = path.resolve("episodes");
  const files = fs.readdirSync(episodesDir);
  const paths = [];

  for (const file of files) {
    if (!file.endsWith(".json")) continue;

    try {
      const filePath = path.join(episodesDir, file);
      const fileContent = fs.readFileSync(filePath, "utf-8");
      const episode = JSON.parse(fileContent);
      // 只生成avaliable为true的剧集页面
      if (episode.avaliable !== false) {
        paths.push({
          params: { id: file.replace(".json", "") },
        });
      }
    } catch (error) {
      console.error(`Error processing episode file ${file}:`, error);
    }
  }

  return paths;
}

const { id } = Astro.params;
import { getAudioDurationFromUrl } from "../../utils/audioMetadata.js";

const episodePath = path.resolve(`episodes/${id}.json`);
const episode = JSON.parse(fs.readFileSync(episodePath, "utf8"));

// 忽略JSON中的duration，从音频文件获取实际时长
// episode.duration = await getAudioDurationFromUrl(episode.audioUrl);
---

<Layout title={`${episode.title}`} description={episode.description}>
  <article class="max-w-4xl mx-auto p-4 sm:p-6 lg:p-8">
    <div class="grid grid-cols-1 md:grid-cols-3 gap-8 items-center mb-8">
      <div
        class="episode-cover rounded-2xl overflow-hidden shadow-sm transform transition-all duration-500 hover:shadow-md"
      >
        <img
          src={episode.coverImage}
          alt={episode.title}
          class="w-full h-auto object-cover"
          onerror="this.src='/img/default-cover.svg'; this.onerror=null;"
        />
      </div>
      <div class="episode-header-info col-span-1 md:col-span-2 space-y-4">
        <h1 class="text-2xl sm:text-3xl font-semibold tracking-tight">
          <span class="ep-id">№{id}</span>
          {episode.title}
        </h1>
        <p class="text-apple-muted text-base leading-relaxed">
          {episode.description}
        </p>
        <div
          class="flex flex-wrap gap-x-6 gap-y-2 text-xs text-apple-muted pt-2"
        >
          <span class="publish-date" data-publish-date={episode.publishDate}
          ></span>
          <span class="duration">时长：{episode.duration}</span>
        </div>
      </div>
    </div>

    <div
      class="bg-white rounded-2xl shadow-sm p-6 sm:p-8 mt-6 transform transition-all duration-300 hover:shadow-md"
    >
      <section class="mb-10">
        <h2 class="text-xl font-medium mb-4 pb-2 border-b border-gray-100">
          节目信息
        </h2>
        <p class="text-apple-muted leading-relaxed">{episode.programInfo}</p>
      </section>

      <section class="mb-10">
        <h2 class="text-xl font-medium mb-4 pb-2 border-b border-gray-100">
          内容提要
        </h2>
        <div class="space-y-4">
          {
            episode.timeline.map((item, index) => (
              <div key={index} class="flex gap-4">
                <div class="text-sm font-medium text-apple-blue">
                  {item.time}
                </div>
                <div class="text-apple-muted">{item.content}</div>
              </div>
            ))
          }
        </div>
      </section>

      <section class="mb-10">
        <h2 class="text-xl font-medium mb-4 pb-2 border-b border-gray-100">
          参考链接
        </h2>
        <ul class="space-y-3">
          {
            episode.references.map((ref, index) => (
              <li key={index}>
                <a
                  href={ref.url}
                  target="_blank"
                  class="text-apple-blue hover:underline font-medium"
                >
                  {ref.name}
                </a>
                <p class="text-sm text-apple-muted mt-1">{ref.description}</p>
              </li>
            ))
          }
        </ul>
      </section>

      {
        episode.guests && (
          <section class="mb-10">
            <h2 class="text-xl font-medium mb-4 pb-2 border-b border-gray-100">
              本期嘉宾
            </h2>
            <ul class="space-y-3">
              {episode.guests.map((ref, index) => (
                <li key={index}>
                  <a
                    href={ref.url}
                    target="_blank"
                    class="text-apple-blue hover:underline font-medium"
                  >
                    {ref.name}
                  </a>
                  <p class="text-sm text-apple-muted mt-1">{ref.description}</p>
                </li>
              ))}
            </ul>
          </section>
        )
      }

      <section class="mb-10">
        <h2 class="text-xl font-medium mb-4 pb-2 border-b border-gray-100">
          播放音频
        </h2>
        <audio
          controls
          src={episode.audioUrl}
          class="native-player w-full h-12 rounded-lg border-none"></audio>
      </section>

      {
        episode.tags && (
          <section class="pt-4 border-t border-gray-100">
            <h3 class="text-sm font-medium mb-3">标签</h3>
            <div class="flex flex-wrap gap-2">
              {episode.tags.map((tag, index) => (
                <span
                  key={index}
                  class="px-3 py-1 bg-apple-light text-apple-dark text-xs rounded-full hover:bg-apple-light/70 transition-colors duration-300"
                >
                  {tag}
                </span>
              ))}
            </div>
          </section>
        )
      }
    </div>
  </article>
  <script is:inline type="module">
    import { formatDate } from "../../utils/dateFormatter.js";
    document.addEventListener("DOMContentLoaded", () => {
      // 格式化日期
      const dateElement = document.querySelector(".publish-date");
      if (dateElement) {
        const publishDate = dateElement.dataset.publishDate;
        dateElement.textContent = `发布时间：${formatDate(publishDate)}`;
      }
    });
  </script>
</Layout>
